{"id":"com.stackjs.stack-todos","version":"undefined","name":"Stack Todos","type":"root","files":[{"name":"Views","type":"folder","files":[{"name":"MainView","templateName":"empty","type":"view","data":{"style":".MainView {\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n\tbottom: 0;\n\tright: 0;\n\tbackground-color: #ffffff;\n}\n\n.title-bar {\n  background-color: #bdbdbd;\n  padding: 20px;\n  height: 30px;\n  left: 0;\n  right: 0;\n  position: fixed;\n  z-index: 1;\n}\n\n.title-bar h1 {\n  font-size: 24px;\n  font-family: Arial;\n  text-align: center;\n  font-weight: normal;\n  padding: 0;\n  margin: 0;\n}\n\n.title-bar .add-btn {\n  position: absolute;\n  top: 10px;\n  right: 5px;\n  background-color: #3e3e3e;\n  padding: 15px 20px;\n  color: #ffffff;\n  font-weight: normal;\n}\n\n.list-container {\n  position: absolute;\n  top: 50px;\n  bottom: 0;\n  left: 0;\n  right: 0;\n}","template":"<div class=\"MainView\">\n\t<div class=\"title-bar\">\n  \t\t<h1>Stack Todos</h1>\n        <div onclick=\"@openAddDialog\" class=\"add-btn\">Add</div>\n    </div>\n    <div class=\"list-container\">\n        \n    </div>\n</div>","view":"Class('MainView::STView', {\n\n\ttemplate: 'MainView',\n\n\trender: function() {\n\t\t// after render callback\n      this.addView(new TodosListView(), '.list-container');\n\t},\n  \n  \topenAddDialog: function() {\n      this.addView(new AddTodoDialog({delegate: this}), document.body);\n  \t},\n  \n  \ttaskAdded: function() {\n      this.callSubviews('render');\n  \t}\n});"}},{"name":"TodosListView","templateName":"ListView","type":"view","data":{"style":".TodosListView {\n\tposition: absolute;\n\ttop: 0;\n\tbottom: 0;\n\tleft: 0;\n\tright: 0;\n\toverflow: scroll;\n\tdisplay: inline-block;\n\tbackground-color: #fff;\n\tpadding: 0;\n}\n\n.TodosListView > div {\n  color: #bdbdbd;\n  font-size: 32px;\n  text-align: center;\n  margin-top: 100px;\n}","template":"<ul class=\"TodosListView\">\n\t<div outlet=\"@emptyMessage\">Empty</div>\n</ul>\n","view":"Class('TodosListView::STView', {\n\n\ttemplate: 'TodosListView',\n  \n  \titemsCount: 0,\n  \n  \temptyMessage: null,\n\n\tTodosListView: function() {\n\n\t},\n\n\trender: function() {\n      \tthis.callSubviews('remove');\n      \tthis.itemsCount = 0;\n      \tTodosDB().getList(this.context(function(items){\n          if (items && items.length) {\n            this.emptyMessage.style.display = \"none\";\n            for (var i = 0; i < items.length; i++) {\n              this.itemsCount++;\n              this.addView(\n                new ListItemView(\n                  { \n                    model: items[i], \n                    delegate: this\n                  }));\t\t\t}\n          } else {\n            this.emptyMessage.style.display = \"block\";\n          }\n        }));      \n\t},\n  \n  \titemRemovedDelegate: function(label) {\n     \tTodosDB().remove(label);\n      \tthis.itemsCount--;\n      \tif (this.itemsCount === 0) {\n        \tthis.emptyMessage.style.display = \"block\";\t\n        } else {\n        \tthis.emptyMessage.style.display = \"none\";\n        }\n    }\n});"}},{"name":"ListItemView","templateName":"ListItemView","type":"view","data":{"style":".ListItemView {\n\tlist-style-type: none;\n\tborder-bottom: 1px solid #000;\n\tpadding: 20px;\n\tmargin: 0;\n  \tcursor: pointer;\n  \tposition: relative;\n  transition: all 0.3s;\n}\n\n.ListItemView.out {\n  opacity: 0;\n}\n\n.ListItemView a {\n\tcolor: #000;\n}\n\n.ListItemView.done a {\n  \ttext-decoration: line-through;\n}\n\n.ListItemView .close {\n  font-size: 22px;\n  color: #bdbdbd;\n  position: absolute;\n  top: 20px;\n  right: 15px;\n}","template":"<li class=\"ListItemView\">\n\t<a outlet=\"@text\" onclick=\"@itemClicked\" ></a>\n    <div class=\"close\" onclick=\"@removeClicked\">X</div>\n</li>","view":"Class('ListItemView::STView', {\n\n\ttemplate: 'ListItemView',\n\ttext: null,\n\n\trender: function() {\n      \tif (this.model) {\n          this.text.innerHTML = this.model.label;\n      \t}\n\t},\n  \n  \titemClicked: function(evt) {\n      \tthis.toggleClass(this.element, \"done\");\n  \t},\n  \n  \tbeforeRemove: function(params) {\n      \tparams.wait = 300;\n  \t},\n  \n  \tremoveClicked: function() {\n      \tthis.callDelegate('itemRemovedDelegate', \n                        [this.model.label]);\n      \tthis.remove();\n  \t}\t\n});"}},{"name":"AddTodoDialog","templateName":"empty","type":"view","data":{"style":".AddTodoDialog {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background-color: #000;\n  z-index: 999;\n}\n\n.AddTodoDialog > div {\n\tposition: absolute;\n\ttop: 20px;\n\tleft: 20px;\n\tright: 20px;\n  \theight: 200px;\n\tbackground-color: #ffffff;\n    border-radius: 5px;\n  \ttransition: all 0.3s;\n  \t-webkit-transform: translateY(500px);\n  \ttext-align: center;\n}\n\n.AddTodoDialog.in > div {\n  \t-webkit-transform: translateY(0);\n}\n\n.AddTodoDialog h1 {\n  font-size: 20px;\n  font-weight: normal;\n  font-family: Arial;\n  text-align: center;\n  text-decoration: underline;\n  margin-top: 30px;\n}\n\n.AddTodoDialog input {\n  font-size: 16px;\n  padding: 10px;\n  width: 200px;\n  margin-top: 20px;\n  border: 1px solid #bdbdbd;\n  display: inline-block;\n}\n\n.AddTodoDialog .add-btn {\n  background-color: #3e3e3e;\n  padding: 15px 20px;\n  color: #ffffff;\n  font-weight: normal;\n  width: 100px;\n  margin: 0 auto;\n  margin-top: 10px;\n  font-family: Arial;\n}","template":"<div class=\"AddTodoDialog\">\n\t<div>\n  \t\t<h1>New Task</h1>\n    \t<input type=\"text\" outlet=\"@textEl\" placeholder=\"Write...\"></input>\n    \t<div class=\"add-btn\" onclick=\"@addTask\">Add</div>\n    </div>\n</div>","view":"Class('AddTodoDialog::STView', {\n\n\ttemplate: 'AddTodoDialog',\n  \n  \ttextEl: null,\n\n\trender: function() {\n\t\t// after render callback\n\t},\n\n  \taddTask: function() {\n      var taskLabel = this.textEl.value;\n      TodosDB().add(taskLabel, this.context(function() {\n        this.callDelegate(\"taskAdded\");\n      \tthis.remove();\n      }));\n  \t}\n});"}}]},{"name":"Services","type":"folder","files":[{"name":"TodosDB","templateName":"database","type":"service","data":{"service":"Class('TodosDB::STDatabase', {\n\n\tname: 'todos',\n\tsize: 10 * 1024 * 1024,\n  \n  \tgetList: function(callback) {\n      \tthis.get('todos', {}, callback);\n  \t},\n  \t\n  \tadd: function(label, callback) {\n      this.save('todos', {label: label, date: new Date(), done: false}, callback);\n    },\n  \n  \tremove: function(label, callback) {\n      this.delete('todos', {label: label}, callback);\n  \t}\n  \t\n});"}}]}]}